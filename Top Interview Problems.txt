1. https://leetcode.com/problems/reverse-string/description/
	->	Write a function that reverses a string. The input string is given as an array of characters s.
	
	Two pointer approach from start one and from last another to keep swapping.

public class Solution {
    public void ReverseString(char[] s) {
        int length = s.Count();
        int i = 0;
        int j = length - 1;

        while (i<j)
        {
            //swap s[i] , s[j]
            char temp = s[i];
            s[i] = s[j];
            s[j] = temp;
            i++; j--;
        }

        for(int z=0; z<length; z++)
        {
            Console.WriteLine(s[z]);
        }
    }
}

2. https://leetcode.com/problems/fizz-buzz/description/	

 public class Solution {
    public IList<string> FizzBuzz(int n) {
           List<string> answer = new List<string>();
           for(int i=1;i<=n;i++)
           {
               if(i % 3 == 0 && i % 5 == 0)
               {
                  answer.Add("FizzBuzz");
                  continue;  
               }
               if(i%3 == 0)
               {
                  answer.Add("Fizz");
                  continue;  
               }
               if(i % 5 == 0)
               {
                  answer.Add("Buzz");
                  continue;  
               }
               answer.Add(i.ToString());
           }

           return answer;
    }
}

3. https://leetcode.com/problems/single-number/description/
	-> Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

		You must implement a solution with a linear runtime complexity and use only constant extra space.

	Eg: 
	----
		Input: nums = [2,2,1]
		Output: 1
				
		Input: nums = [4,1,2,1,2]
		Output: 4

Approach:
----------
	Bruteforce would take O(n^2)
	If we use HAshMap takes O(n) + space of O(n)
	But to have linear complexity, there is another approach suggested to use bitwise operators.
	Hints to note:
	-------------
		A xor A = 0; A xor 0 = A; 
	
	so in our case it is clearly mentioned about there will be only one single element, so using this approach to xoring all the 
elements, we will remain with last single element.
		Eg: [4,1,2,1,2] => 4 ^ 1 ^ 2 ^ 1 ^ 2 => 1^1 would become 0, 2^2 would become 0; remaining 4 will be returned as answer.
		
public class Solution {
    public int SingleNumber(int[] nums) {
        int ans = 0;
        foreach(int i in nums)
        {
            ans=ans^i;//bitwise operator xor
        } 
        return ans;
    }
}


4. https://leetcode.com/problems/maximum-depth-of-binary-tree/description/	
	-> Given the root of a binary tree, return its maximum depth.

		A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
			Input: root = [3,9,20,null,null,15,7]
			Output: 3

Approach:
----------
	if root is null, return 0;
	else, tree height is 1 and we will calculate the max of left subtree height, right sub tree height.
	i.e, 1 + Math.Max(MaxDepth(root.left), MaxDepth(root.right))
	
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int MaxDepth(TreeNode root) {
        if(root == null) return 0;

        int result = 1 + Math.Max(MaxDepth(root.left),
                                  MaxDepth(root.right));
        return result;
    }
}
	TC: O(n) as we would be traversing the entire node, SC: O(1) still it takes call stack space. 

5. https://leetcode.com/problems/move-zeroes/description/
	-> Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

		Note that you must do this in-place without making a copy of the array.	

Examples:
----------
		Input: nums = [0,1,0,3,12]
		Output: [1,3,12,0,0]
		
		Input: nums = [0]
		Output: [0]	
 	
Intuition:
-----------
  #1. First I tried swapping 0 element with non zero to move all non zero to left.
  #2. But there is another approach found from others solution.	
		-> That is we are concerned about the non zero elements itself, so we loop through array and check if the element is not 0, we will insert it to left most (that is we should have another pointer to tell which is insert position) and another pointer to traverse and check if the element is not 0;
		-> once the previous step is done, all the non - 0 elements would have come to left of the array and current
		insert pointer would be some where in the middle, as "i" might have reached last element of array.
		-> Then now whatever after "j" pointer we can make it 0 as non zero elements are moved to left already.

See solution:
--------------
public class Solution {
    public void MoveZeroes(int[] nums) {
        int i=0; //traverse pointer
        int j=0; //pointer to tell which position we need to insert

        while(i < nums.Length) //O(n) as i pass from 0 to n.
        {
           if(nums[i] != 0)
            {                
                nums[j] = nums[i];
                j++;
            }
            i++;
        }
        while(j < nums.Length) //j would be somewhere in middle, so O(n/2)
        {
            nums[j] = 0;
            j++;
        }
    }
}		
	In total, TC: O(n), SC: O(1).
	
6. https://leetcode.com/problems/sum-of-two-integers/description/
	Given two integers a and b, return the sum of the two integers without using the operators + and -.
	
		
	Example 1:
	----------	
		Input: a = 1, b = 2
		Output: 3
		
Solution:
----------
	As it is said we should not use + or -, we have to use bit wise operators to find out the sum.
	When working out a sum, we know we will have two things, one is sum and carry, carry goes to one step left to add further.
	Same thing applies here.
	So basically, when a + b => carry + sum 
	Example:
	--------
		A = 2 (0010), B = 7(0111)
		Carry = 0010 (a&b)
		Sum (a)= 0101 (a^b)
		now b  = 0100 (Carry << 1)

2nd step:
---------
		Carry  = 0100 (a&b)
		Sum (a)= 0001 (a^b)
		b 	   = 1000(carry << 1) 

3rd step
---------
		Carry = 0000 (a&b)
		sum(a)= 1001 (a^b)
		 b 	  = 0000 (carry <<1)

Now b == 0 => return a (1001) => 9		 
	
public class Solution {
    public int GetSum(int a, int b) {
        //check if b == 0 return a;
        //find carry (a & b) this we need to calculate from notebook
        //find "a xor b" a^b = sum
        /* left shift carry by 1 bit, 
        since always carry values go one value left(just plain 
        normal addition carry) */

        if(b == 0) return a;

        while(b!=0)
        {
            int carry = a & b;
            a = a ^ b;
            b = carry << 1;
        }
        return a;
    }
}	
7. https://leetcode.com/problems/reverse-linked-list/description/

I/P: [1,2,3,4,5]; O/P: [5,4,3,2,1]
I/P: []; O/P: []


Iterative Approach:
---------------------
TC: O(n) SC: O(1) no extra space.

public class Solution {
    public ListNode ReverseList(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        if(curr == null) return null;

        while(curr != null)
        {
            var next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
}

Recursive Approach: 
--------------------
TC: O(n) SC: O(n) 

public class Solution {
    public ListNode ReverseList(ListNode head) {
        return ReverseNode(null, head);
    }

    public ListNode ReverseNode(ListNode prev, ListNode curr)
    {
        //base 
        if(curr == null) return prev;

         var next = curr.next;
         curr.next = prev;
         prev = curr;
         curr = next;

         return ReverseNode(prev, curr);
    }
}

8. https://leetcode.com/problems/excel-sheet-column-number/description/

I/P: 'A' -> O/P: 1
I/P: 'AA' -> O/P: 27
I/P: 'Z' -> O/P: 26
I/P: 'AZ' -> O/P: 52

Approach:
---------
	To split the characters from string, then start summing.
	When there are more than one characters involved, obvious we know for single character it can have 26 letters
	for the next character -> it has to be multiplied with 26 and do sum up.
	
	This may not be clear, lets take this with an example.
	if "AZ" -> 1*26 + 26 = 52 (result).
	if "BZ" -> 2*26 + 26 = 78 (result)
	if "AA" -> 1*26 + 1  = 27 (result)
	if "CC" -> 3*26 + 3  = 81
	
Solution Code: TC: O(n) SC: O(1)
--------------
public class Solution {
    public int TitleToNumber(string columnTitle) {
        int res = 0;
        char[] chArray = columnTitle.ToCharArray();

        for(int i=0; i < chArray.Length; i++)
        {
            res = res * 26 + chArray[i] - 'A' + 1;
        }

        return res;   
    }
}	
	
9.  https://leetcode.com/problems/majority-element/description/

10. https://leetcode.com/problems/roman-to-integer/description/	